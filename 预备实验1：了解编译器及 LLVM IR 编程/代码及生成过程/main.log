*** IR Dump Before Pre-ISel Intrinsic Lowering ***; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"success\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Pre-ISel Intrinsic Lowering ***; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"success\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; Loop:
; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; Exit blocks
; <label>:30:                                     ; preds = %16
  br label %31
*** IR Dump After Loop Strength Reduction ***
; Preheader:
; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; Loop:
; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; Exit blocks
; <label>:30:                                     ; preds = %16
  br label %31
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16
  br label %31

; <label>:31:                                     ; preds = %30, %0
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
*** IR Dump Before Rewrite Symbols ***; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"success\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"success\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %6)
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 100
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %2, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  br label %16

; <label>:16:                                     ; preds = %20, %10
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %16
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %22, %23
  store i32 %24, i32* %3, align 4
  %25 = load i32, i32* %3, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  store i32 %27, i32* %2, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %16

; <label>:30:                                     ; preds = %16, %0
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
96B		%0:gr32 = MOV32ri64 @.str; GR32:%0
112B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
128B		%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
144B		%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		%rdi = COPY %1; GR64:%1
192B		%rsi = COPY %4; GR64:%4
208B		%al = COPY %3; GR8:%3
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		%5:gr32 = COPY %eax; GR32:%5
272B		%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
288B		%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
304B		JG_1 %bb.4, implicit %eflags
320B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

336B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
352B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
368B		%8:gr32 = MOV32ri64 @.str.1; GR32:%8
384B		%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
400B		%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
416B		%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
432B		%rdi = COPY %9; GR64:%9
448B		%al = COPY %11; GR8:%11
464B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
480B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
496B		%12:gr32 = COPY %eax; GR32:%12
512B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
528B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
544B		%14:gr32 = MOV32ri64 @.str.2; GR32:%14
560B		%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
576B		%rdi = COPY %15; GR64:%15
592B		%esi = COPY %13; GR32:%13
608B		%al = COPY %11; GR8:%11
624B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
640B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
656B		%16:gr32 = COPY %eax; GR32:%16
672B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
688B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
704B		%rdi = COPY %15; GR64:%15
720B		%esi = COPY %17; GR32:%17
736B		%al = COPY %11; GR8:%11
752B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
768B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
784B		%18:gr32 = COPY %eax; GR32:%18
	    Successors according to CFG: %bb.2(?%)

800B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
816B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
832B		%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
848B		JGE_1 %bb.4, implicit %eflags
864B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

880B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
896B		%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
912B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
928B		%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
944B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
960B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
976B		%24:gr32 = MOV32ri64 @.str.2; GR32:%24
992B		%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
1008B		%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
1024B		%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
1040B		%rdi = COPY %25; GR64:%25
1056B		%esi = COPY %23; GR32:%23
1072B		%al = COPY %27; GR8:%27
1088B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
1104B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1120B		%28:gr32 = COPY %eax; GR32:%28
1136B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1152B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
1168B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1184B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1200B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1216B		%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
1232B		%eax = COPY %21; GR32:%21
1248B		RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
96B		%0:gr32 = MOV32ri64 @.str; GR32:%0
112B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
128B		%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
144B		%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		%rdi = COPY %1; GR64:%1
192B		%rsi = COPY %4; GR64:%4
208B		%al = COPY %3; GR8:%3
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		%5:gr32 = COPY %eax; GR32:%5
272B		%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
288B		%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
304B		JG_1 %bb.4, implicit %eflags
320B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

336B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
352B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
368B		%8:gr32 = MOV32ri64 @.str.1; GR32:%8
384B		%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
400B		%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
416B		%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
432B		%rdi = COPY %9; GR64:%9
448B		%al = COPY %11; GR8:%11
464B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
480B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
496B		%12:gr32 = COPY %eax; GR32:%12
512B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
528B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
544B		%14:gr32 = MOV32ri64 @.str.2; GR32:%14
560B		%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
576B		%rdi = COPY %15; GR64:%15
592B		%esi = COPY %13; GR32:%13
608B		%al = COPY %11; GR8:%11
624B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
640B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
656B		%16:gr32 = COPY %eax; GR32:%16
672B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
688B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
704B		%rdi = COPY %15; GR64:%15
720B		%esi = COPY %17; GR32:%17
736B		%al = COPY %11; GR8:%11
752B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
768B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
784B		%18:gr32 = COPY %eax; GR32:%18
	    Successors according to CFG: %bb.2(?%)

800B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
816B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
832B		%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
848B		JGE_1 %bb.4, implicit %eflags
864B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

880B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
896B		%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
912B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
928B		%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
944B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
960B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
976B		%24:gr32 = MOV32ri64 @.str.2; GR32:%24
992B		%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
1008B		%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
1024B		%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
1040B		%rdi = COPY %25; GR64:%25
1056B		%esi = COPY %23; GR32:%23
1072B		%al = COPY %27; GR8:%27
1088B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
1104B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1120B		%28:gr32 = COPY %eax; GR32:%28
1136B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1152B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
1168B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1184B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1200B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1216B		%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
1232B		%eax = COPY %21; GR32:%21
1248B		RET 0, %eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%5:gr32 = COPY %eax; GR32:%5
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%12:gr32 = COPY %eax; GR32:%12
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%16:gr32 = COPY %eax; GR32:%16
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%18:gr32 = COPY %eax; GR32:%18
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%28:gr32 = COPY %eax; GR32:%28
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, killed %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%24:gr32 = MOV32ri64 @.str.2; GR32:%24
	%25:gr64 = SUBREG_TO_REG 0, killed %24, sub_32bit; GR64:%25 GR32:%24
	%26:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%26
	%27:gr8 = COPY %26.sub_8bit; GR8:%27 GR32:%26
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = MOV32rm %stack.5, 1, %noreg, 0, %noreg; mem:LD4[%6](dereferenceable) GR32:%6
	%7:gr32 = SUB32ri8 %6, 99, implicit-def %eflags; GR32:%7,%6
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	%20:gr32 = SUB32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%20,%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY %1; GR64:%1
	%rsi = COPY %4; GR64:%4
	%al = COPY %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %15; GR64:%15
	%esi = COPY %17; GR32:%17
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY %25; GR64:%25
	%esi = COPY %23; GR32:%23
	%al = COPY %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY %21; GR32:%21
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY killed %1; GR64:%1
	%rsi = COPY killed %4; GR64:%4
	%al = COPY killed %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY killed %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY killed %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %15; GR64:%15
	%esi = COPY killed %17; GR32:%17
	%al = COPY killed %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm killed %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY killed %25; GR64:%25
	%esi = COPY killed %23; GR32:%23
	%al = COPY killed %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY killed %21; GR32:%21
	RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY killed %1; GR64:%1
	%rsi = COPY killed %4; GR64:%4
	%al = COPY killed %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY killed %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY killed %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %15; GR64:%15
	%esi = COPY killed %17; GR32:%17
	%al = COPY killed %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm killed %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY killed %25; GR64:%25
	%esi = COPY killed %23; GR32:%23
	%al = COPY killed %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY killed %21; GR32:%21
	RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY killed %1; GR64:%1
	%rsi = COPY killed %4; GR64:%4
	%al = COPY killed %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY killed %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY killed %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %15; GR64:%15
	%esi = COPY killed %17; GR32:%17
	%al = COPY killed %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm killed %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY killed %25; GR64:%25
	%esi = COPY killed %23; GR32:%23
	%al = COPY killed %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY killed %21; GR32:%21
	RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY killed %1; GR64:%1
	%rsi = COPY killed %4; GR64:%4
	%al = COPY killed %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY killed %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY killed %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %15; GR64:%15
	%esi = COPY killed %17; GR32:%17
	%al = COPY killed %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = ADD32rm killed %22, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23,%22
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY killed %25; GR64:%25
	%esi = COPY killed %23; GR32:%23
	%al = COPY killed %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY killed %21; GR32:%21
	RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY killed %1; GR64:%1
	%rsi = COPY killed %4; GR64:%4
	%al = COPY killed %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY killed %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY killed %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %15; GR64:%15
	%esi = COPY killed %17; GR32:%17
	%al = COPY killed %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = COPY killed %22; GR32:%23,%22
	%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY killed %25; GR64:%25
	%esi = COPY killed %23; GR32:%23
	%al = COPY killed %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY killed %21; GR32:%21
	RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @.str; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
	%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
	%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
	%rdi = COPY killed %1; GR64:%1
	%rsi = COPY killed %4; GR64:%4
	%al = COPY killed %3; GR8:%3
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%8:gr32 = MOV32ri64 @.str.1; GR32:%8
	%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
	%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
	%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
	%rdi = COPY killed %9; GR64:%9
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%14:gr32 = MOV32ri64 @.str.2; GR32:%14
	%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
	%rdi = COPY %15; GR64:%15
	%esi = COPY killed %13; GR32:%13
	%al = COPY %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %15; GR64:%15
	%esi = COPY killed %17; GR32:%17
	%al = COPY killed %11; GR8:%11
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
	CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
	%23:gr32 = COPY killed %22; GR32:%23,%22
	%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
	%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
	%rdi = COPY killed %25; GR64:%25
	%esi = COPY killed %23; GR32:%23
	%al = COPY killed %27; GR8:%27
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
	%eax = COPY killed %21; GR32:%21
	RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
96B		%0:gr32 = MOV32ri64 @.str; GR32:%0
112B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
128B		%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
144B		%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		%rdi = COPY killed %1; GR64:%1
192B		%rsi = COPY killed %4; GR64:%4
208B		%al = COPY killed %3; GR8:%3
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
336B		%8:gr32 = MOV32ri64 @.str.1; GR32:%8
352B		%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
368B		%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
384B		%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
400B		%rdi = COPY killed %9; GR64:%9
416B		%al = COPY %11; GR8:%11
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
496B		%14:gr32 = MOV32ri64 @.str.2; GR32:%14
512B		%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
528B		%rdi = COPY %15; GR64:%15
544B		%esi = COPY killed %13; GR32:%13
560B		%al = COPY %11; GR8:%11
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		%rdi = COPY killed %15; GR64:%15
656B		%esi = COPY killed %17; GR32:%17
672B		%al = COPY killed %11; GR8:%11
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
848B		%23:gr32 = COPY killed %22; GR32:%23,%22
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
912B		%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
928B		%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
944B		%rdi = COPY killed %25; GR64:%25
960B		%esi = COPY killed %23; GR32:%23
976B		%al = COPY killed %27; GR8:%27
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1104B		%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
1120B		%eax = COPY killed %21; GR32:%21
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
96B		%0:gr32 = MOV32ri64 @.str; GR32:%0
112B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
128B		%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
144B		%3:gr8 = COPY killed %2.sub_8bit; GR8:%3 GR32:%2
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		%rdi = COPY killed %1; GR64:%1
192B		%rsi = COPY killed %4; GR64:%4
208B		%al = COPY killed %3; GR8:%3
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
336B		%8:gr32 = MOV32ri64 @.str.1; GR32:%8
352B		%9:gr64 = SUBREG_TO_REG 0, killed %8, sub_32bit; GR64:%9 GR32:%8
368B		%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
384B		%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
400B		%rdi = COPY killed %9; GR64:%9
416B		%al = COPY %11; GR8:%11
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
496B		%14:gr32 = MOV32ri64 @.str.2; GR32:%14
512B		%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
528B		%rdi = COPY %15; GR64:%15
544B		%esi = COPY killed %13; GR32:%13
560B		%al = COPY %11; GR8:%11
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		%rdi = COPY killed %15; GR64:%15
656B		%esi = COPY killed %17; GR32:%17
672B		%al = COPY killed %11; GR8:%11
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm killed %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
848B		%23:gr32 = COPY killed %22; GR32:%23,%22
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
912B		%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
928B		%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
944B		%rdi = COPY killed %25; GR64:%25
960B		%esi = COPY killed %23; GR32:%23
976B		%al = COPY killed %27; GR8:%27
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1104B		%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
1120B		%eax = COPY killed %21; GR32:%21
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
96B		%0:gr32 = MOV32ri64 @.str; GR32:%0
112B		%1:gr64 = SUBREG_TO_REG 0, %0, sub_32bit; GR64:%1 GR32:%0
128B		%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
144B		%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		%rdi = COPY %1; GR64:%1
192B		%rsi = COPY %4; GR64:%4
208B		%al = COPY %3; GR8:%3
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
336B		%8:gr32 = MOV32ri64 @.str.1; GR32:%8
352B		%9:gr64 = SUBREG_TO_REG 0, %8, sub_32bit; GR64:%9 GR32:%8
368B		%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
384B		%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
400B		%rdi = COPY %9; GR64:%9
416B		%al = COPY %11; GR8:%11
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
496B		%14:gr32 = MOV32ri64 @.str.2; GR32:%14
512B		%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
528B		%rdi = COPY %15; GR64:%15
544B		%esi = COPY %13; GR32:%13
560B		%al = COPY %11; GR8:%11
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		%rdi = COPY %15; GR64:%15
656B		%esi = COPY %17; GR32:%17
672B		%al = COPY %11; GR8:%11
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
848B		%23:gr32 = COPY %22; GR32:%23,%22
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
912B		%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
928B		%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
944B		%rdi = COPY %25; GR64:%25
960B		%esi = COPY %23; GR32:%23
976B		%al = COPY %27; GR8:%27
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1104B		%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
1120B		%eax = COPY %21; GR32:%21
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
96B		%0:gr32 = MOV32ri64 @.str; GR32:%0
112B		%1:gr64 = SUBREG_TO_REG 0, %0, sub_32bit; GR64:%1 GR32:%0
128B		%2:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%2
144B		%3:gr8 = COPY %2.sub_8bit; GR8:%3 GR32:%2
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		%rdi = COPY %1; GR64:%1
192B		%rsi = COPY %4; GR64:%4
208B		%al = COPY %3; GR8:%3
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
336B		%8:gr32 = MOV32ri64 @.str.1; GR32:%8
352B		%9:gr64 = SUBREG_TO_REG 0, %8, sub_32bit; GR64:%9 GR32:%8
368B		%10:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%10
384B		%11:gr8 = COPY %10.sub_8bit; GR8:%11 GR32:%10
400B		%rdi = COPY %9; GR64:%9
416B		%al = COPY %11; GR8:%11
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
496B		%14:gr32 = MOV32ri64 @.str.2; GR32:%14
512B		%15:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%15 GR32:%14
528B		%rdi = COPY %15; GR64:%15
544B		%esi = COPY %13; GR32:%13
560B		%al = COPY %11; GR8:%11
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		%rdi = COPY %15; GR64:%15
656B		%esi = COPY %17; GR32:%17
672B		%al = COPY %11; GR8:%11
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%22:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%22
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %22; mem:ST4[%5] GR32:%22
848B		%23:gr32 = COPY %22; GR32:%23,%22
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
912B		%25:gr64 = SUBREG_TO_REG 0, %14, sub_32bit; GR64:%25 GR32:%14
928B		%27:gr8 = COPY %10.sub_8bit; GR8:%27 GR32:%10
944B		%rdi = COPY %25; GR64:%25
960B		%esi = COPY %23; GR32:%23
976B		%al = COPY %27; GR8:%27
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1104B		%21:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%21
1120B		%eax = COPY %21; GR32:%21
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
192B		%rsi = COPY %4; GR64:%4
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
544B		%esi = COPY %13; GR32:%13
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
656B		%esi = COPY %17; GR32:%17
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
960B		%esi = COPY %23; GR32:%23
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
192B		%rsi = COPY %4; GR64:%4
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
544B		%esi = COPY %13; GR32:%13
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
656B		%esi = COPY %17; GR32:%17
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
960B		%esi = COPY %23; GR32:%23
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
192B		%rsi = COPY %4; GR64:%4
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
544B		%esi = COPY %13; GR32:%13
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
656B		%esi = COPY %17; GR32:%17
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
960B		%esi = COPY %23; GR32:%23
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
192B		%rsi = COPY %4; GR64:%4
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
544B		%esi = COPY %13; GR32:%13
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
656B		%esi = COPY %17; GR32:%17
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
960B		%esi = COPY %23; GR32:%23
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit killed %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, killed %eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		%4:gr64 = LEA64r %stack.5, 1, %noreg, 0, %noreg; GR64:%4
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
216B		%rsi = COPY %4; GR64:%4
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		%13:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable) GR32:%13
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
568B		%esi = COPY %13; GR32:%13
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		%17:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%17
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
680B		%esi = COPY %17; GR32:%17
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		%19:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable) GR32:%19
752B		CMP32rm %19, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable) GR32:%19
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		%23:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable) GR32:%23
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, %23; mem:ST4[%5] GR32:%23
864B		%23:gr32 = ADD32rm %23, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable) GR32:%23
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %23; mem:ST4[%3] GR32:%23
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
984B		%esi = COPY %23; GR32:%23
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		%29:gr32 = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable) GR32:%29
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %29; mem:ST4[%2] GR32:%29
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, %eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
752B		CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
864B		renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
32B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
48B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
64B		MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
80B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
160B		renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
176B		dead %edi = MOV32ri64 @.str, implicit-def %rdi
208B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
224B		CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
240B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
256B		CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
272B		JG_1 %bb.4, implicit killed %eflags
288B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

304B	%bb.1: derived from LLVM BB %10
	    Predecessors according to CFG: %bb.0
320B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
400B		dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
416B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
432B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
448B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
464B		renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
480B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
528B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
560B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
576B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
592B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
608B		renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
624B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
640B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
672B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
688B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
704B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	    Successors according to CFG: %bb.2(?%)

720B	%bb.2: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.1 %bb.3
736B		renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
752B		CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
768B		JGE_1 %bb.4, implicit killed %eflags
784B		JMP_1 %bb.3
	    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

800B	%bb.3: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.2
816B		renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
832B		MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
864B		renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
880B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
896B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
944B		dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
976B		dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
992B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
1008B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
1024B		renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
1040B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
1056B		ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
1072B		JMP_1 %bb.2
	    Successors according to CFG: %bb.2(?%)

1088B	%bb.4: derived from LLVM BB %30
	    Predecessors according to CFG: %bb.0 %bb.2
1120B		%eax = MOV32r0 implicit-def dead %eflags
1136B		RET 0, %eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 0; mem:ST4[%2]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.3, 1, %noreg, 0, %noreg, 1; mem:ST4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %rsi = LEA64r %stack.5, 1, %noreg, 0, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CMP32mi8 %stack.5, 1, %noreg, 0, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%2](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %stack.5, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %stack.4, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, renamable %esi; mem:ST4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	renamable %eax = MOV32rm %stack.4, 1, %noreg, 0, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %stack.3, 1, %noreg, 0, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.1
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit killed %eflags
	JMP_1 %bb.3
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri64 @.str, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri64 @.str.1, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri64 @.str.2, implicit-def %rdi
	dead %eax = MOV32r0 implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0, %eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JGE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.3: derived from LLVM BB %20
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-20]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameSetup
	MOV32mi %rbp, 1, %noreg, -24, %noreg, 0; mem:ST4[%1]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 0; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -16, %noreg, 1; mem:ST4[%4]
	renamable %rsi = LEA64r %rbp, 1, %noreg, -12, %noreg
	dead %edi = MOV32ri @.str, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @__isoc99_scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %rsi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	CMP32mi8 %rbp, 1, %noreg, -12, %noreg, 99, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JG_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.1(0x40000000 / 0x80000000 = 50.00%) %bb.4(0x40000000 / 0x80000000 = 50.00%)

%bb.1: derived from LLVM BB %10
    Predecessors according to CFG: %bb.0
	dead %edi = MOV32ri @.str.1, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%2](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	JMP_1 %bb.2
    Successors according to CFG: %bb.2(?%)

%bb.3: derived from LLVM BB %20, Align 4 (16 bytes)
    Predecessors according to CFG: %bb.2
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%3](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -20, %noreg, renamable %esi; mem:ST4[%5]
	renamable %esi = ADD32rm killed renamable %esi, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%2](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -4, %noreg, renamable %esi; mem:ST4[%3]
	dead %edi = MOV32ri @.str.2, implicit-def %rdi
	dead %eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags, implicit-def %al
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit %esi, implicit %al, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	renamable %eax = MOV32rm %rbp, 1, %noreg, -20, %noreg; mem:LD4[%5](dereferenceable)
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%2]
	ADD32mi8 %rbp, 1, %noreg, -16, %noreg, 1, implicit-def dead %eflags; mem:ST4[%4] LD4[%4](dereferenceable)
    Successors according to CFG: %bb.2(?%)

%bb.2: derived from LLVM BB %16
    Predecessors according to CFG: %bb.1 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -16, %noreg; mem:LD4[%4](dereferenceable)
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%6](dereferenceable)
	JL_1 %bb.3, implicit %eflags
    Successors according to CFG: %bb.3(0x7c000000 / 0x80000000 = 96.88%) %bb.4(0x04000000 / 0x80000000 = 3.12%)

%bb.4: derived from LLVM BB %30
    Predecessors according to CFG: %bb.0 %bb.2
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 32, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ %eax

# End machine code for function main.

